// 'profile_init.cpp'  List of profilers to have in simulation.  Also includes
// description of each statistic.

// Macros for simplifying inititialization.
#include <stdio.h>                      // for FILE
#include <list>                         // for list
#include <string>                       // for string
#include "profile/profile.h"        // for ProfileStat, etc
#include "profile/profile_names.h"  // for ::STATNAME_ATOMICS, etc
#include "sim.h"            // for stats
#if 0
#define __NEW_PROFILER_STAT(name, type, config) do { \
  rigel::profiler::stats[name] = ProfileStat(name, type, config); \
} while (0);
#define NEW_PROFILER_STAT(name, type, config) \
  __NEW_PROFILER_STAT(name, type, config);
#endif

// If this is a histogram statistic, we want to check it every cycle to
// accumulate the total number of hits each cycle and add it to a bin.
#define __NEW_PROFILER_STAT(name, type, config) do {           \
  rigel::profiler::stats[name] = ProfileStat(#name, type, config); \
  ProfileStat::per_cycle_accumulate_list.push_front(                \
    &(rigel::profiler::stats[name]));                             \
} while (0);

#define NEW_PROFILER_STAT(name, type, config) \
  __NEW_PROFILER_STAT(name, type, config);





//  ProfileStat::per_cycle_accumulate_list.push_front( 
// &(rigel::profiler::stats[name]));


using namespace rigel;

void
ProfileStat::init(FILE * fp)
{
  active_cycles = 0;
  active_dram_cycles = 0;
  // In single-threaded mode we are active by default.
	// Otherwise, we are inactive until SIM_SLEEP_OFF() is called.
  active = rigel::SINGLE_THREADED_MODE;
  // The profiler prints to stderr by default.
  output_file = fp;
  // Clear retired instruction count.
  retired_instrs = 0;
  // Allocate the statistic counters (in profile_names.h)
  profiler::stats = new ProfileStat[STATNAME_PROFILE_STAT_COUNT];

  // Count the number of L2 misses over L2D_MISS_LAT_PROFILE_MAX cycles
  NEW_PROFILER_STAT(STATNAME_L2D_PROFILE_IGNORE, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  // Number of cache-line-sized allocations for the overflow directory.
  NEW_PROFILER_STAT(STATNAME_OVERFLOW_DIRECTORY_ALLOCS, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);

  // Histogram the number of sharers at the time a directory entry is
  // invalidated.  As an aside, conventional wisdom says this is either
  // everyone or <4ish.
  NEW_PROFILER_STAT(STATNAME_DIR_SHARER_COUNT, PROF_STAT_MULTI_HISTOGRAM, 
    PROF_STAT_CONFIG_IGNORE_ZEROS);

  NEW_PROFILER_STAT(STATNAME_DIR_ENTRIES_CODE, PROF_STAT_HISTOGRAM,
    PROF_STAT_CONFIG_SUPPRESS_STDERR_DUMP |
    PROF_STAT_CONFIG_PER_CYCLE |
    PROF_STAT_CONFIG_TIME_HISTOGRAM);
  NEW_PROFILER_STAT(STATNAME_DIR_ENTRIES_INVALID, PROF_STAT_HISTOGRAM,
    PROF_STAT_CONFIG_SUPPRESS_STDERR_DUMP |
    PROF_STAT_CONFIG_PER_CYCLE |
    PROF_STAT_CONFIG_TIME_HISTOGRAM);
  NEW_PROFILER_STAT(STATNAME_DIR_ENTRIES_OTHER, PROF_STAT_HISTOGRAM,
    PROF_STAT_CONFIG_SUPPRESS_STDERR_DUMP |
    PROF_STAT_CONFIG_PER_CYCLE |
    PROF_STAT_CONFIG_TIME_HISTOGRAM);
  NEW_PROFILER_STAT(STATNAME_DIR_ENTRIES_STACK, PROF_STAT_HISTOGRAM,
    PROF_STAT_CONFIG_SUPPRESS_STDERR_DUMP |
    PROF_STAT_CONFIG_PER_CYCLE |
    PROF_STAT_CONFIG_TIME_HISTOGRAM);
  NEW_PROFILER_STAT(STATNAME_OUTSTANDING_COHERENCE_BCASTS, PROF_STAT_HISTOGRAM,
    PROF_STAT_CONFIG_CYCLE_COUNTING_HISTOGRAM);

  NEW_PROFILER_STAT(STATNAME_NBL_QUEUE_LENGTH, PROF_STAT_MEM_HISTOGRAM, PROF_STAT_CONFIG_NONE);

  NEW_PROFILER_STAT(STATNAME_L2_INV_USEFUL, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2_INV_WASTED, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2_WB_USEFUL, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2_WB_WASTED, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);

  // The number of evictions from the directory.
  NEW_PROFILER_STAT(STATNAME_COHERENCE_EVICTS, PROF_STAT_INCREMENT, PROF_STAT_CONFIG_NONE);

  // The number of committed instructions of each type. 
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_NONE, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_ALU, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_ALU_VECTOR, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_FPU, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_FPU_VECTOR, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_FPU_SPECIAL, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_ALU_SHIFT, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_SPFU, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_COMPARE, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_MEM, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_BRANCH, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_BOTH, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_COMMIT_FU_COUNT, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);

  //L2 arb time (in cycles)
  NEW_PROFILER_STAT(STATNAME_L2_ARB_TIME, PROF_STAT_MEM_HISTOGRAM,  PROF_STAT_CONFIG_NONE);
  
  // Messages in and out of the Cluster Cache.
  NEW_PROFILER_STAT(STATNAME_L2OUT_TOTAL,               PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_READ_NONSTACK_REQ,   PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_READ_STACK_REQ,      PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_INSTR_REQ,           PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_WRITE_NONSTACK_REQ,  PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_WRITE_STACK_REQ,     PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_WRITEBACK_REQ,       PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_COHERENCE_REPLY,     PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_GLOBAL_REQ,          PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_ATOMIC_REQ,          PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_PREFETCH_REQ,        PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_EVICT_NONSTACK_REQ,  PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_EVICT_STACK_REQ,     PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_READ_RELEASE_NONSTACK, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2OUT_READ_RELEASE_STACK,  PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_TOTAL,                PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_READ_REPLY,           PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_INSTR_REPLY,          PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_WRITE_REPLY,          PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_WRITEBACK_REPLY,      PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_GLOBAL_REPLY,         PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_ATOMIC_REPLY,         PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_PREFETCH_REPLY,       PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_EVICT_REPLY,          PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_COHERENCE_PROBE,      PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_L2IN_READ_RELEASE,         PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);

  // Histogram of the maximum number of concurrent sharers directory entries have before being evicted.
  // Histogram of MC service times.
  NEW_PROFILER_STAT(STATNAME_DIR_MAX_SHARERS, PROF_STAT_MEM_HISTOGRAM,
                    PROF_STAT_CONFIG_NONE);
  
  // Type of invalidations from the directory
  NEW_PROFILER_STAT(STATNAME_DIR_INVALIDATE_REG, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_DIR_INVALIDATE_WR, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_DIR_INVALIDATE_BCAST, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);
  // Number of write-to-write transfers that will not allocate at the GCache if
  // wr2wr-noalloc is enabled.
  NEW_PROFILER_STAT(STATNAME_DIR_WR2WR_TXFR, PROF_STAT_INCREMENT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_DIR_L2D_DIRTY_EVICTS, PROF_STAT_INCREMENT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_DIR_L2D_READ_RELEASES, PROF_STAT_INCREMENT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_DIR_INCOHERENT_ACCESSES, PROF_STAT_INCREMENT, PROF_STAT_CONFIG_NONE);

  // Dropped prefetches at the cluster cache.
  NEW_PROFILER_STAT(STATNAME_DROPPED_HW_CCACHE_PREFETCHES, PROF_STAT_INCREMENT,  PROF_STAT_CONFIG_NONE);

  // Histogram of MC service times.
  NEW_PROFILER_STAT(STATNAME_MC_LATENCY, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
    
  // Histogram of MC request reordering (metric is Reorder Density, see RFC5236)
  NEW_PROFILER_STAT(STATNAME_MC_REORDERING, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);

  NEW_PROFILER_STAT(STATNAME_DIRECTORY, PROF_STAT_CACHE,
    PROF_STAT_CONFIG_PER_CYCLE |
    PROF_STAT_CONFIG_MISSES | PROF_STAT_CONFIG_TIME_HISTOGRAM);

  NEW_PROFILER_STAT(STATNAME_OVERFLOW_DIRECTORY_TOUCHES, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);

  NEW_PROFILER_STAT(STATNAME_DIRECTORY_EVICTIONS, PROF_STAT_MULTI_TIME_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);

  NEW_PROFILER_STAT(STATNAME_DIRECTORY_EVICTION_SHARERS, PROF_STAT_MULTI_TIME_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);

  NEW_PROFILER_STAT(STATNAME_DIRECTORY_REREQUESTS, PROF_STAT_MULTI_TIME_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);

  // The number of cycles that the profiler itself is active for
  NEW_PROFILER_STAT(STATNAME_PROFILER_ACTIVE_CYCLES, PROF_STAT_INCREMENT, 
    // No special configurations
    PROF_STAT_CONFIG_NONE);

  // Number of global cache accesses.  GCache activity factor.  Separated out
  // overflow (WayPoint) and regular accesses.
  NEW_PROFILER_STAT(STATNAME_GLOBAL_CACHE_RW_ACCESSES, PROF_STAT_INCREMENT, 
    // G$ Accesses per cycle.
    PROF_STAT_CONFIG_PER_CYCLE);
  NEW_PROFILER_STAT(STATNAME_GLOBAL_CACHE_OF_ACCESSES, PROF_STAT_INCREMENT, 
    // G$ Accesses per cycle.
    PROF_STAT_CONFIG_PER_CYCLE);

  // L1 data cache (Line buffer).
  NEW_PROFILER_STAT(STATNAME_L1D_CACHE, PROF_STAT_CACHE, 
    PROF_STAT_CONFIG_PER_CYCLE | 
    // Accesses are per-core
    PROF_STAT_CONFIG_CORE |
    // Relative miss rate
    PROF_STAT_CONFIG_HITS_PER_K_INSTRS |
    // Base histogram in time on misses
    PROF_STAT_CONFIG_MISSES | PROF_STAT_CONFIG_TIME_HISTOGRAM);

  // L1 instruction cache
  NEW_PROFILER_STAT(STATNAME_L1I_CACHE, PROF_STAT_CACHE, 
    PROF_STAT_CONFIG_PER_CYCLE | 
    // Accesses are per-core
    PROF_STAT_CONFIG_CORE |
    // Relative miss rate
    PROF_STAT_CONFIG_HITS_PER_K_INSTRS |
    // Base histogram in time on misses
    PROF_STAT_CONFIG_MISSES | PROF_STAT_CONFIG_TIME_HISTOGRAM);

  // L2I Cache for non-unified configurations.
  NEW_PROFILER_STAT(STATNAME_L2I_CACHE, PROF_STAT_CACHE, 
    PROF_STAT_CONFIG_PER_CYCLE | 
    // Accesses are per-cluster
    PROF_STAT_CONFIG_CLUSTER |
    // Relative miss rate
    PROF_STAT_CONFIG_HITS_PER_K_INSTRS |
    // Base histogram in time on misses
    PROF_STAT_CONFIG_MISSES | PROF_STAT_CONFIG_TIME_HISTOGRAM);

  // Cluster cache hit statistics.
  NEW_PROFILER_STAT(STATNAME_L2D_CACHE, PROF_STAT_CACHE, 
    // Cluster cacheccesses per cycle.
    PROF_STAT_CONFIG_PER_CYCLE | 
    // Accesses are per-cluster
    PROF_STAT_CONFIG_CLUSTER |
    // Relative miss rate
    PROF_STAT_CONFIG_HITS_PER_K_INSTRS |
    // Base histogram in time on misses
    PROF_STAT_CONFIG_MISSES | PROF_STAT_CONFIG_TIME_HISTOGRAM);

  // Global cache hit statistics.
  NEW_PROFILER_STAT(STATNAME_GLOBAL_CACHE, PROF_STAT_CACHE,
    // G$ Accesses per cycle.
    PROF_STAT_CONFIG_PER_CYCLE |
    // Relative miss rate
    PROF_STAT_CONFIG_HITS_PER_K_INSTRS |
    // Base histogram in time on misses
    PROF_STAT_CONFIG_MISSES | PROF_STAT_CONFIG_TIME_HISTOGRAM);

  NEW_PROFILER_STAT(STATNAME_TILE_INTERCONNECT_INJECTS, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);

  NEW_PROFILER_STAT(STATNAME_DRAM_MLP, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_DRAM_BLP, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_DRAM_CHANNEL_LOAD_BALANCE, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_DRAM_BANK_LOAD_BALANCE, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
    
  NEW_PROFILER_STAT(STATNAME_BRANCH_TARGET, PROF_STAT_PREDICTOR,
    PROF_STAT_CONFIG_NONE);

  NEW_PROFILER_STAT(STATNAME_RETIRED_INSTRUCTIONS, PROF_STAT_INCREMENT, 
    PROF_STAT_CONFIG_PER_CYCLE | 
    // Calculate IPC (per core)
    PROF_STAT_CONFIG_CORE);

  NEW_PROFILER_STAT(STATNAME_ONE_OPR_INSTRUCTIONS, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ONE_OPR_BYPASSED, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_TWO_OPR_INSTRUCTIONS, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_TWO_OPR_BYPASSED_ONE, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_TWO_OPR_BYPASSED_TWO, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);

  // Number of global atomic operations per-cycle and per-core
  NEW_PROFILER_STAT(STATNAME_GLOBAL_ATOMICS, PROF_STAT_INSTR_MIX, 
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_CORE);
  NEW_PROFILER_STAT(STATNAME_ATOMICS, PROF_STAT_INSTR_MIX, 
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_CORE);
  NEW_PROFILER_STAT(STATNAME_LOCAL_ATOMICS, PROF_STAT_INSTR_MIX, 
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_CORE);
  NEW_PROFILER_STAT(STATNAME_GLOBAL_MEMORY, PROF_STAT_INSTR_MIX, 
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_CORE);
  NEW_PROFILER_STAT(STATNAME_LOCAL_MEMORY, PROF_STAT_INSTR_MIX, 
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_CORE);

  // Histogram of TileInterconnect L1 router accesses.  Tells us how much router
  // bandwidth we are using.  Connects cores to L2 routers.
  NEW_PROFILER_STAT(STATNAME_L1_ROUTER_HISTOGRAM_REQ, PROF_STAT_HISTOGRAM,
    // Calculate accesses on a per-router/per-cycle basis.
    PROF_STAT_CONFIG_L1ROUTER);
  NEW_PROFILER_STAT(STATNAME_L1_ROUTER_HISTOGRAM_REPLY, PROF_STAT_HISTOGRAM,
    // Calculate accesses on a per-router/per-cycle basis.
    PROF_STAT_CONFIG_L1ROUTER);

  // Histogram of TileInterconnect L2 router accesses.  Tells us how much router
  // bandwidth we are using.  Connects L1 routers to GNet.
  NEW_PROFILER_STAT(STATNAME_L2_ROUTER_HISTOGRAM_REQ, PROF_STAT_HISTOGRAM,
    // Calculate accesses on a per-router/per-cycle basis.
    PROF_STAT_CONFIG_L2ROUTER);
  NEW_PROFILER_STAT(STATNAME_L2_ROUTER_HISTOGRAM_REPLY, PROF_STAT_HISTOGRAM,
    // Calculate accesses on a per-router/per-cycle basis.
    PROF_STAT_CONFIG_L2ROUTER);

  // Track the GCache Port usage.  This should be the same as the number of
  // accesses if I am not mistaken?
  // FIXME This actually counts port usage on the dummy queues b/w tile and global interconnect.
  // With more than 1 tile, this stat will be broken.
  NEW_PROFILER_STAT(STATNAME_GCACHE_PORT, PROF_STAT_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);

  // Track the length of the buffer at the cluster cache holding requests
  // waiting on misses..
  NEW_PROFILER_STAT(STATNAME_CCACHE_OUTBOUND_QUEUE, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  // Track the number of requests waiting to be injected into the tile
  // interconnect each cycle.
  NEW_PROFILER_STAT(STATNAME_CCACHE_PENDING_OUTBOUND_QUEUE, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  // How many CCache hits were prefetches?
  NEW_PROFILER_STAT(STATNAME_CCACHE_HWPREFETCH_TOTAL, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  // Was the CCache prefetch ever actually used?
  NEW_PROFILER_STAT(STATNAME_CCACHE_HWPREFETCH_USEFUL, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);

  NEW_PROFILER_STAT(STATNAME_GCACHE_HWPREFETCH_USEFUL, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_GCACHE_HWPREFETCH_TOTAL, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_BULK_PREFETCH_TOTAL, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_BULK_PREFETCH_USEFUL, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);

  // DRAM command statistics.
  NEW_PROFILER_STAT(STATNAME_DRAM_CMD_READ, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_TILE);
  NEW_PROFILER_STAT(STATNAME_DRAM_CMD_IDLE, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_TILE);
  NEW_PROFILER_STAT(STATNAME_DRAM_CMD_ACTIVATE, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_TILE);
  NEW_PROFILER_STAT(STATNAME_DRAM_CMD_PRECHARGE, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_TILE);
  NEW_PROFILER_STAT(STATNAME_DRAM_CMD_WRITE, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_TILE);
  NEW_PROFILER_STAT(STATNAME_DRAM_BUS_BUSY_CYCLES, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_PER_CYCLE | PROF_STAT_CONFIG_TILE | PROF_STAT_CONFIG_TIME_HISTOGRAM);

  // Histogram of ( address, event ) pairs.
  NEW_PROFILER_STAT(STATNAME_HISTOGRAM_GLOBAL_CACHE_MISSES, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_HISTOGRAM_L2D_CACHE_MISSES, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_HISTOGRAM_L1D_CACHE_MISSES, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_HISTOGRAM_L2I_CACHE_MISSES, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_HISTOGRAM_L1I_CACHE_MISSES, PROF_STAT_MEM_HISTOGRAM,
    PROF_STAT_CONFIG_NONE);

  // Memory controller scheduled request to open row.
  NEW_PROFILER_STAT(STATNAME_MC_SCHED_ROW_HIT, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_PER_CYCLE);
  // Memory controller.  Number of cycles where a WDT for pending request is
  // triggered.  Increase in these will result in poorer first-ready/row-hit
  // behaivor.
  NEW_PROFILER_STAT(STATNAME_MC_FORCE_SCHEDULE, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_PER_CYCLE);

  NEW_PROFILER_STAT(STATNAME_INSTR_INSTR_STALL_CYCLES, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_TIME_HISTOGRAM);
  NEW_PROFILER_STAT(STATNAME_INSTR_IF_OCCUPANCY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_DE_OCCUPANCY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_EX_OCCUPANCY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_MC_OCCUPANCY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_FP_OCCUPANCY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_CC_OCCUPANCY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_WB_OCCUPANCY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_SYNC_WAITING_FOR_ACK, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_RESOURCE_CONFLICT_ALU, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_RESOURCE_CONFLICT_FPU, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_RESOURCE_CONFLICT_ALU_SHIFT, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_RESOURCE_CONFLICT_MEM, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_RESOURCE_CONFLICT_BRANCH, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_RESOURCE_CONFLICT_BOTH, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_STUCK_BEHIND_OTHER_INSTR, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);  
  NEW_PROFILER_STAT(STATNAME_INSTR_L1D_PENDING, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L1D_MSHR, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L1I_PENDING, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L1I_MSHR, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2D_PENDING, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2D_MSHR, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2D_ARBITRATE, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2D_ACCESS, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2I_PENDING, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2I_MSHR, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2I_ARBITRATE, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2I_ACCESS, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_STUCK_BEHIND_GLOBAL, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L1ROUTER_REQUEST, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2ROUTER_REQUEST, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2GC_REQUEST, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_TILE_REQUESTBUFFER, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L1ROUTER_REPLY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2ROUTER_REPLY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_L2GC_REPLY, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_TILE_REPLYBUFFER, PROF_STAT_INCREMENT,
    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GNET_TILEREQUEST, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GNET_GCREQUEST, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GNET_REQUESTBUFFER, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GNET_REPLYBUFFER, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GNET_GCREPLY, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GNET_TILEREPLY, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_SENDING_BCAST_NOTIFIES, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GC_FILL, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GC_MSHR, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GC_WRITE_ALLOCATE, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_INSTR_GC_PENDING, PROF_STAT_INCREMENT,
                    PROF_STAT_CONFIG_NONE);

  // Calculate the ATTEMPTS for loads and stores / hits and misses
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_LDW_MISS_L1D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_LDW_MISS_L2D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_LDW_HIT_L1D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_LDW_HIT_L2D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_STW_MISS_L1D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_STW_MISS_L2D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_STW_HIT_L1D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_STW_HIT_L2D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_LDL_MISS_L1D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_LDL_MISS_L2D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_LDL_HIT_L1D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_LDL_HIT_L2D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_STC_MISS_L1D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_STC_MISS_L2D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_STC_HIT_L1D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
  NEW_PROFILER_STAT(STATNAME_ATTEMPTS_STC_HIT_L2D, PROF_STAT_MEAN_COUNT, PROF_STAT_CONFIG_NONE);
}

