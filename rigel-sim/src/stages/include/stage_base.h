////////////////////////////////////////////////////////////////////////////////
// stage_base.h
////////////////////////////////////////////////////////////////////////////////
//
// Define a generic stage class that will be derived inside each core
//
////////////////////////////////////////////////////////////////////////////////
#ifndef _STAGE_BASE_H_
#define _STAGE_BASE_H_

#include "sim.h"
#include "core.h"
#include "util/ui_legacy.h"

class CoreInOrderLegacy;

////////////////////////////////////////////////////////////////////////////////
// Class: StageBase
////////////////////////////////////////////////////////////////////////////////
// base class for stages
// abstract class - not instantiated, used for deriving base stage classes
////////////////////////////////////////////////////////////////////////////////
class StageBase {

  //////////////////////////////////////////////////////////////////////////////
  // public methods
  //////////////////////////////////////////////////////////////////////////////
  public:

    // constructor
    StageBase(CoreInOrderLegacy *_core) : core(_core) {
      for(int i=0;i<rigel::ISSUE_WIDTH;i++)
        stage_stall[i]=false;
    }

    virtual ~StageBase() {} // destructor
    virtual void stall(int pipe)   { stage_stall[pipe] = true;  }
    virtual void unstall(int pipe) { stage_stall[pipe] = false; }

    virtual bool is_stalled(int pipe) {
      for(int i = pipe; i >=0; --i) {
        if(stage_stall[i])
          return true;
      }
      return false;
    }

    // pure virtual method, implemented individually by each derived stage
    virtual void Update() = 0;

  //////////////////////////////////////////////////////////////////////////////
  // public data
  //////////////////////////////////////////////////////////////////////////////
  public:

  //////////////////////////////////////////////////////////////////////////////
  // protected methods
  //////////////////////////////////////////////////////////////////////////////
  protected:

  //////////////////////////////////////////////////////////////////////////////
  // protected data
  //////////////////////////////////////////////////////////////////////////////
  protected:
    CoreInOrderLegacy *core;
    bool stage_stall[rigel::ISSUE_WIDTH];
};


////////////////////////////////////////////////////////////////////////////////
// Class: FetchStage
////////////////////////////////////////////////////////////////////////////////
// encapsulates fetch stage data, methods, modifiers
////////////////////////////////////////////////////////////////////////////////
class FetchStage: public StageBase {
  public:
    // constructor
    FetchStage(CoreInOrderLegacy *_core) : StageBase(_core) {
    };
    void fetch_2wide(InstrSlot &slot_a, InstrSlot &slot_b);

    virtual bool IsStalled();
    virtual void Update();
   // InstrSlot slot_a;
   // InstrSlot slot_b;
};

////////////////////////////////////////////////////////////////////////////////
// Class DecodeStage
////////////////////////////////////////////////////////////////////////////////
// encapsulates decode stage data, methods, modifiers
////////////////////////////////////////////////////////////////////////////////
class DecodeStage: public StageBase {
  public:
    // constructor
    DecodeStage(CoreInOrderLegacy *_core) : StageBase(_core) {
    };
    virtual bool IsStalled();
    virtual void Update();
    InstrSlot decode(InstrSlot instr, int pipe);
   // InstrSlot instr;
   // InstrSlot instr_out;
   // int pipe;
};

////////////////////////////////////////////////////////////////////////////////
// Class ExecuteStage
////////////////////////////////////////////////////////////////////////////////
// encapsulates execute stage data, methods, modifiers
////////////////////////////////////////////////////////////////////////////////
class ExecuteStage: public StageBase {
  public:
    // constructor
    ExecuteStage(CoreInOrderLegacy *_core) : StageBase(_core) {
     //fprintf(stdout, "core_num ExSt %d \n", _core->core_num);
    } ;
    virtual bool IsStalled();
    virtual void Update();
    InstrSlot execute(InstrSlot instr, int pipe);
    //InstrSlot instr;
    //InstrSlot instr_out;
    //int pipe;
};

////////////////////////////////////////////////////////////////////////////////
// Class CCacheAccess Stage
////////////////////////////////////////////////////////////////////////////////
// encapsulates execute stage data, methods, modifiers
////////////////////////////////////////////////////////////////////////////////
class CCacheAccessStage: public StageBase {
  public:
    // constructor
    CCacheAccessStage(CoreInOrderLegacy *_core) : StageBase(_core) {
    //fprintf(stdout, "core_num ExSt %d \n", _core->core_num);
    } ;
    virtual bool IsStalled();
    virtual void Update();
    InstrSlot ccaccess(InstrSlot instr, int pipe, bool stalledMemoryOp);
    //InstrSlot instr;
    //InstrSlot instr_out;
    //int pipe;
};

////////////////////////////////////////////////////////////////////////////////
// Class FPCompleteStage
////////////////////////////////////////////////////////////////////////////////
// encapsulates execute stage data, methods, modifiers
////////////////////////////////////////////////////////////////////////////////
class FPCompleteStage: public StageBase {
  public:
    // constructor
    FPCompleteStage(CoreInOrderLegacy *_core) : StageBase(_core) {
    };
    virtual bool IsStalled();
    virtual void Update();
    InstrSlot fpcomplete(InstrSlot instr, int pipe);
   // InstrSlot instr;
   // InstrSlot instr_out;
   // int pipe;
};

////////////////////////////////////////////////////////////////////////////////
// Class WriteBackStage
////////////////////////////////////////////////////////////////////////////////
// encapsulates write back stage data, methods, modifiers
////////////////////////////////////////////////////////////////////////////////
class WriteBackStage: public StageBase {
  public:
    // constructor
    WriteBackStage(CoreInOrderLegacy *_core) : StageBase(_core) {
    };
    virtual bool IsStalled();
    virtual void Update();
    virtual void UpdateWBStats(InstrSlot instr, int temp_thread_id);
    InstrSlot writeback(InstrSlot instr, int pipe);
    // Handle all of the profiling for L1/2 D/I miss/hit cycles.
    void update_memaccess_stats(InstrSlot instr);
 //   InstrSlot instr;
 //   InstrSlot instr_out;
 //   int pipe;
};


////////////////////////////////////////////////////////////////////////////////
// Class MemoryStage
////////////////////////////////////////////////////////////////////////////////
// encapsulates execute stage data, methods, modifiers
////////////////////////////////////////////////////////////////////////////////
class MemoryStage: public StageBase {
  public:
    // constructor
    MemoryStage(CoreInOrderLegacy *_core) : StageBase(_core) {
    };
    virtual bool IsStalled();
    virtual void Update();
    void UpdateRestorePC();
    InstrSlot memaccess(InstrSlot instr, int pipe);
 //   InstrSlot instr;
 //   InstrSlot instr_out;
 //   int pipe;
};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline bool
FetchStage::IsStalled()
{
  return false;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline bool
DecodeStage::IsStalled()
{
  return false;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline bool
ExecuteStage::IsStalled()
{
  assert(0);
  return false;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline bool
FPCompleteStage::IsStalled()
{
  assert(0);
  return false;
}

////////////////////////////////////////////////////////////////////////////////
// MemoryStage::IsStalled()
////////////////////////////////////////////////////////////////////////////////
inline bool
MemoryStage::IsStalled()
{
  return false;
}


////////////////////////////////////////////////////////////////////////////////
// WriteBackStage::IsStalled()
////////////////////////////////////////////////////////////////////////////////
inline bool
WriteBackStage::IsStalled()
{
  return false;
}

////////////////////////////////////////////////////////////////////////////////
// CCacheAccessStage::IsStalled()
////////////////////////////////////////////////////////////////////////////////
inline bool
CCacheAccessStage::IsStalled()
{
  assert(0);
  return false;
}




#endif // _STAGE_BASE_H_
